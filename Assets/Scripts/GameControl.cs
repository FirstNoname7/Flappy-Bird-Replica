using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement; //подключаю модуль, чтобы использовать его для рестарта
using UnityEngine.UI; //подключаю модуль, чтобы использовать элементы интерфейса игры, а именно Text

public class GameControl : MonoBehaviour
{
    //этот скрипт относится к выводу окна "Игра окончена"
    public static GameControl instance; //делаю этот скрипт статичным, то есть доступным для использования в других скриптах. GameControl - имя скрипта. instance - переменная, которую можно использовать, чтобы ссылаться на этот скрипт в других скриптах
    //то есть через переменную instance можно обратиться к вообще любому элементу этого скрипта
    public GameObject gameOverText; //переменная, содержащая в себе игровой объект, называющаяся gameOverText. Этим объектом является текст "Игра окончена"
    public Text scoreText; //переменная с именем scoreText, хранящая Text (элемент UI)
    public bool gameOver = false; //проверка, окончена игра или нет. По дефолту игра не окончена
    public float scrollSpeed = -1.5f; //скорость прокрутки фона. Она минусовая, то есть фон прокручивается влево
    private int score = 0; //очки. По дефолту, то есть в начале игры их нет, Руби набирает их по ходу прохождения
    void Awake() //запускается перед стартом
    {
        if (instance == null) //если instance не используется, то есть равна null, то:
        {
            instance = this; //переменная instance (которая уже создана чуть выше) является статичной, то есть может использоваться где угодно
            //this - это специальное ключевое слово C#, означающее “объект, который в данный момент выполняет эту функцию”.
            //то есть тогда птичка (Руби) не будет летать
        }
        else if (instance != this) //если же instance сейчас не выполняет эту функцию, то:
        {
            Destroy(gameObject); //удаляем игровой объект, который прикреплён к этому скрипту, и теперь птичка будет летать
        }
    }

    // Update is called once per frame
    void Update()
    {
        if (gameOver == true && Input.GetMouseButtonDown(0)) //если игра закончилась (gameOver == true) и (&&) игрок кликнул на левую кнопку мыши, то:
        {
            SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex); //сцена загружается заново (рестарт)
            //используется модуль SceneManager, он загружает сцену LoadScene. В скобках указана эта сцена
            //снова используем модуль  SceneManager, ищем сцену, которая сейчас активна (GetActiveScene()) и загружаем её (buildIndex)
        }

    }
    public void BirdScored() //вызывается всякий раз, когда птица (Руби) набирает очки
    {
        if (gameOver) //если игра закончилась, то:
            return; //возвращаем всё как было, то есть очки не будут начисляться (ведь игра закончилась)
        score++; //но если игра не закончилась, то прибавляем очки (эта краткая запись, которая позволяет прибавить +1 очко)
        scoreText.text = "Очки: " + score.ToString(); //табло с кол-вом набранных очков
        //scoreText.text - переменная scoreText, хранящая Text (элемент UI). score.toString() - кроме слова "Очки: " будет выводиться переменная score, причем в качестве текста, то есть в качестве типа данных String, а не int.
    }
    public void BirdDied() //функция, которая вызывается при смерти птицы (ну в данном случае Руби за птицу отвечает)
    {
        gameOverText.SetActive(true); //открывается игровой объект, который вложен в инспекторе в переменную gameOverText (в нашем случае это окошки текстовые)
        gameOver = true; //игра окончена
    }
}
